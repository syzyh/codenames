{"version":3,"sources":["App.js","index.js"],"names":["arrRandom","arr","sort","Math","random","color","Card","props","show","word","index","type","onFlip","flip","className","style","background","opacity","onClick","App","useState","setShow","Array","map","i","flips","setFlips","allTypes","setAllTypes","allCardsData","setAllCardsData","useEffect","split","slice","display","flexWrap","newFs","console","log","textAlign","marginTop","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAGMA,EAAY,SAAAC,GAChB,OAAOA,EAAIC,MAAK,kBAAMC,KAAKC,SAAW,OAKlCC,EAAQ,CAAC,OAAQ,UAAW,UAAW,QAE7C,SAASC,EAAKC,GAAQ,IACZC,EAA0CD,EAA1CC,KAAMC,EAAoCF,EAApCE,KAAMC,EAA8BH,EAA9BG,MAAOC,EAAuBJ,EAAvBI,KAAMC,EAAiBL,EAAjBK,OACjC,OADkDL,EAATM,KACxB,qBAAKC,UAAU,OAAOC,MAAO,CAAEC,WAAYX,EAAMM,IAAjD,SAA0DF,IAEzE,qBACEK,UAAU,OACVC,MAAOP,EAAO,CAAEQ,WAAYX,EAAMM,GAAOM,QAAS,IAAO,GACzDC,QAAS,kBAAMN,EAAOF,IAHxB,SAKGD,IAmCQU,MA9Bf,WAAgB,IAAD,EACWC,oBAAS,GADpB,mBACNZ,EADM,KACAa,EADA,OAEaD,mBAAS,YAAKE,MAAM,KAAKC,KAAI,SAAAC,GAAC,OAAI,MAF/C,mBAENC,EAFM,KAECC,EAFD,OAGmBN,mBAAS,IAH5B,mBAGNO,EAHM,KAGIC,EAHJ,OAI2BR,mBAAS,IAJpC,mBAINS,EAJM,KAIQC,EAJR,KAUb,OALAC,qBAAU,WACRH,EAAY5B,EAAU,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KACvE8B,EAAgB9B,EAzBJ,q8IAyBsBgC,MAAM,WAAMC,MAAM,EAAG,OACtD,IAGD,sBAAKnB,UAAU,MAAf,UACE,qBAAKC,MAAO,CAAEmB,QAAS,OAAQC,SAAU,QAAzC,SAEEN,EAAaN,KAAI,SAACd,EAAMe,GAAP,OAAa,cAAClB,EAAD,CAAiBG,KAAMA,EAAMD,KAAMA,EAAMG,KAAMgB,EAASH,GAAG,EAAGX,KAAMY,EAAMD,GAAId,MAAOc,EAAGZ,OAAQ,SAAAY,GAC5H,IAAMY,EAAK,YAAQX,GACnBW,EAAMZ,IAAK,EACXa,QAAQC,IAAIF,GACZV,EAASU,KAJ8B3B,QAQ3C,qBAAKM,MAAO,CAAEwB,UAAW,SAAUC,UAAW,QAA9C,SACE,wBAAQzB,MAAO,CAAE0B,MAAO,QAASC,OAAQ,QAASxB,QAAS,kBAAIG,GAASb,IAAxE,SAAgFA,EAAO,SAAW,eC1C1GmC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.249a205a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport './App.css';\n\nconst arrRandom = arr => {\n  return arr.sort(() => Math.random() - 0.5);\n}\n\nconst rawData = '凤凰,真空,椅子,高雅,哪吒,彩虹,暗号,囚徒,谎言,双截棍,七里香,摇滚,小燕子,寿司,日本,椰子,海南,寺庙,纽扣,脊椎,矮人,嘻哈,黑寡妇,爆竹,报刊,天安门,大力水手,学位,春天,菠菜,悬崖,水牛,节拍,生命,茶,甲板,水龙头,指南针,羊驼,手掌,米饭,勇气,大理,湖南,北京,冬瓜,律师,哆啦A梦,泰山,岳飞,皮卡丘,镭射,别针,半人马,俱乐部,麻瓜,护照,马蹄铁,超级英雄,心,鸭嘴兽,银行,苍蝇,罗马,鲸鱼,鼻子,服务员,小说,游戏机,鱼,蝙蝠,战士,火山,雷电,胡椒粉,忍者,溜冰鞋,导弹,星星,广场,电线,电影,粉末,床单,船,影子,胡须,熊,代码,叶子,稻草,记者,手,向导,西瓜,企鹅,数字,病毒,电脑,棉,垃圾,火,海盗,华盛顿,桌子,病,刷子,喇叭,培根,邮票,小牛,蜘蛛,音乐会,激光,灯泡,直升机,天使,玩偶,经理,河流,教堂,飞机,新娘,袋鼠,好莱坞,望远镜,杯子,管子,石头,天堂,瀑布,鹿,网,香蕉,围栏,松鼠,披风,射线,盐,插座,笛子,冰淇淋,雪人,发动机,球,富豪,漫画,印度,玻璃,潜水艇,汽车,蜜蜂,鲨鱼,兔子,狮子,澳大利亚,夜晚,池塘,高尔夫球,蛞蝓,显微镜,乌鸦,绿洲,床,摩天大楼,轨道,刀,戒指,小鸡,喜马拉雅山,拇指,昆虫,卫星,水星,东京,马,鼠标,革命,果酱,武力,死亡,拐杖,阁楼,外星人,救护车,火鸡,螺丝,手表,嘴,中国,手枪,公园,电池,天空,魔法,薄荷,帽子,炸弹,针,秋千,机器人,医生,学校,旅馆,降落伞,手臂,烹饪,狗,十字架,绿色,海滩,鹰,草,中锋,球拍,车票,铁,大理石,酒吧,马拉松,金星,魔术师,火柴,叉子,田,希腊,天才,松树,线,鼹鼠,表,院子,圆,秋天,桥,靴子,井,巧克力,间谍,吉他,合同,树根,港口,龙,衣服,碗,王冠,英镑,法国,矿井,猛犸象,小孩,标签,黄金,莎士比亚,灵魂,实验室,太阳,眼睛,骑士,树懒,德国,木星,女孩,红色,领带,夏天,正方形,圆规,恶作剧,啤酒,蝴蝶结,精神,首领,盔甲,隐藏,愿望,军医,步枪,纹身,旗帜,洋娃娃,蚂蚁,蝗虫,海象,短跑,吸血鬼,化妆,僵尸,午餐,老板娘,劳动改造,猫眼,幽灵,羁绊,恋爱,平底锅,森林,封面,盗贼,阴影,牙齿,可乐,山洞,太极,鞭子,鼓,牛仔,功夫,沙拉,听诊器,粉笔,泡沫,牙刷,剃须刀,洗发水,发烧,雾,肩膀,宝贝,睡觉,梦,车轮,端午节,饼干,体操运动员,钢笔,法老王,青蛙,帐篷,枕头,酸味,路,钟';\n\nconst color = ['#f50', '#2db7f5', '#ffe58f', '#aaa'];\n\nfunction Card(props) {\n  const { show, word, index, type, onFlip, flip } = props;\n  if (flip) return <div className=\"card\" style={{ background: color[type]}}>{word}</div>\n  return (\n    <div\n      className=\"card\"\n      style={show ? { background: color[type], opacity: 0.5} : {}}\n      onClick={() => onFlip(index)}\n    >\n      {word}\n    </div>\n  )\n}\n\nfunction App() {\n  const [show, setShow] = useState(false);\n  const [flips, setFlips] = useState([ ...Array(25)].map(i => false));\n  const [allTypes, setAllTypes] = useState([]);\n  const [allCardsData, setAllCardsData] = useState([]);\n  useEffect(() => {\n    setAllTypes(arrRandom([1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4]));\n    setAllCardsData(arrRandom(rawData.split('，')).slice(0, 25));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n      {\n        allCardsData.map((word, i) => <Card key={word} word={word} show={show} type={allTypes[i]-1} flip={flips[i]} index={i} onFlip={i => {\n          const newFs = [ ...flips ];\n          newFs[i] = true;\n          console.log(newFs);\n          setFlips(newFs);\n        }} />)\n      }\n      </div>\n      <div style={{ textAlign: 'center', marginTop: '16px'}}>\n        <button style={{ width: '160px', height: '42px'}} onClick={()=>setShow(!show)}>{show ? 'Hidden' : 'Show'}</button>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}